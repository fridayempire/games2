class Game{constructor(){this.timeLeft=10,this.milliseconds=0,this.timer=null,this.correctWire=null,this.wires=[],this.clues=[],this.validWords=[],this.isLoading=!1,this.isTestMode=!0,this.loadingSpinner=null,this.currentMission=1,this.moduleStatuses={timer:!1,clues:!1,wires:!1,simon:!1,word:!1,grid:!1},this.dailyPuzzles=[{number:1,word:"WIRE",clues:["Used to conduct electricity","Starts with W","Has 4 letters"]},{number:2,word:"BOMB",clues:["An explosive device","Starts with B","Has 4 letters"]}],this.currentPuzzleIndex=0,this.shuffledPuzzles=[],this.homepage=document.getElementById("homepage"),this.briefingScreen=document.getElementById("briefing-screen"),this.gameScreen=document.getElementById("game-screen"),this.resultScreen=document.getElementById("result-screen"),this.startButton=document.getElementById("start-mission"),this.timerDisplay=document.getElementById("timer"),this.cluesContainer=document.getElementById("clues-container"),this.wiresContainer=document.getElementById("wires-container"),this.resultMessage=document.getElementById("result-message"),this.tryAgainButton=document.getElementById("try-again"),this.shareButton=document.getElementById("share-score"),this.initializeModules(),this.loadingSpinner=this.startButton.querySelector(".loading-spinner"),this.loadDailyPuzzles().catch(e=>{console.error("Failed to load puzzles:",e),this.setCurrentPuzzle()}),this.setupEventListeners(),this.checkDailyPlay(),this.commonWords={4:["ABLE","BABY","BACK","BALL","BAND","BANK","BASE","BATH","BEAR","BEAT","BELL","BELT","BEND","BIKE","BIRD","BITE","BLUE","BOAT","BODY","BOOK","BORN","BOTH","BOWL","BURN","CAKE","CALL","CALM","CAMP","CARD","CARE","CASE","CASH","CELL","CHAT","CHIP","CITY","CLUB","COAT","CODE","COLD","COME","COOK","COOL","COPE","COPY","CORE","COST","CREW","CROP","DARK","DATA","DATE","DAWN","DAYS","DEAD","DEAL","DEAR","DEBT","DECK","DEEP","DEER","DESK","DIAL","DIET","DIRT","DISH","DISK","DOOR","DOWN","DRAW","DROP","DRUM","DUCK","DUTY","EACH","EARN","EASE","EAST","EASY","EDGE","ELSE","EVEN","EVER","FACE","FACT","FADE","FAIL","FAIR","FALL","FARM","FAST","FATE","FEAR","FEED","FEEL","FILE","FILL","FILM","FIND","FINE","FIRE","FISH","FLAG","FLAT","FOLD","FOLK","FOOD","FOOL","FOOT","FORD","FORM","FORT","FREE","FROG","FUEL","FUND","GAME","GATE","GEAR","GIFT","GIRL","GIVE","GLAD","GOAL","GOLD","GOLF","GOOD","GRAB","GRAY","GROW","HAIR","HALF","HALL","HAND","HANG","HARD","HATE","HEAD","HEAL","HEAR","HEAT","HELP","HERE","HERO","HIGH","HILL","HIRE","HOLD","HOLE","HOME","HOPE","HOST","HOUR","HUGE","HUNT","HURT","IDEA","INCH","INTO","IRON","ITEM","JAZZ","JOIN","JOKE","JUMP","JUST","KEEP","KICK","KIND","KING","KISS","KNEE","KNOW","LACK","LADY","LAKE","LAND","LAST","LATE","LAWN","LEAD","LEAF","LEAN","LEFT","LIFE","LIFT","LIKE","LINE","LINK","LIST","LIVE","LOAD","LOCK","LONG","LOOK","LOSE","LOST","LOVE","LUCK","LUNG"],5:["ABOUT","ABOVE","ABUSE","ACTOR","ACUTE","ADMIT","ADOPT","ADULT","AFTER","AGAIN","AGENT","AGREE","AHEAD","ALARM","ALBUM","ALERT","ALIKE","ALIVE","ALLOW","ALONE","ALONG","ALTER","AMONG","ANGER","ANGLE","ANGRY","APART","APPLE","APPLY","ARENA","ARGUE","ARISE","ARRAY","ASIDE","ASSET","AUDIO","AUDIT","AVOID","AWARD","AWARE","BADLY","BAKER","BASES","BASIC","BASIS","BEACH","BEGAN","BEGIN","BEGUN","BEING","BELOW","BENCH","BLACK","BLAME","BLIND","BLOCK","BLOOD","BOARD","BOOST","BOOTH","BOUND","BRAIN","BRAND","BREAD","BREAK","BREED","BRIEF","BRING","BROAD","BROKE","BROWN","BUILD","BUILT","BUYER","CABLE","CARRY","CATCH","CAUSE","CHAIN","CHAIR","CHART","CHASE","CHEAP","CHECK","CHEST","CHIEF","CHILD","CHINA","CHOSE","CIVIL","CLEAN","CLEAR","CLIMB","CLOCK","CLOSE","CLOUD","COACH","COAST","COLOR","COUNT","COURT","COVER","CRAFT","CRASH","CREAM","CRIME","CROSS","CROWD","CROWN","DANCE","DEATH","DELAY","DEPTH","DOUBT","DRAFT","DRAMA","DREAM","DRESS","DRINK","DRIVE","EARLY","EARTH","EMPTY","ENEMY","ENJOY","ENTER","EQUAL","ERROR","EVENT","EXACT","EXIST","EXTRA","FAITH","FALSE","FAULT","FIELD","FIGHT","FINAL","FIRST","FLASH","FLEET","FLOOR","FOCUS","FORCE","FRAME","FRESH","FRONT","FRUIT","FUNNY","GIANT","GLASS","GRADE","GRAND","GRASS","GREAT","GREEN","GROUP","GUARD","GUESS","GUEST","GUIDE","HAPPY","HEART","HEAVY","HORSE","HOTEL","HOUSE","HUMAN","IMAGE","INDEX","INNER","ISSUE","JUDGE","KNIFE","LAUGH","LAYER","LEARN","LEVEL","LIGHT","LIMIT"],6:["ACCEPT","ACTION","ACTIVE","ACTUAL","ADJUST","ADVICE","AFFECT","AGENCY","AGREE","ALWAYS","ANIMAL","ANSWER","APPEAR","AROUND","ARRIVE","ARTIST","ASPECT","ATTACK","AUTHOR","BEAUTY","BECOME","BEFORE","BETTER","BEYOND","BRIDGE","BUDGET","CAMERA","CANCER","CAREER","CENTER","CHANCE","CHANGE","CHARGE","CHOICE","CHOOSE","CHURCH","CIRCLE","CLIENT","COFFEE","COMMON","CREATE","DAMAGE","DANGER","DEGREE","DESIGN","DESIRE","DETAIL","DINNER","DOCTOR","DRIVER","EFFECT","ENERGY","ENOUGH","ESCAPE","EXPECT","EXPERT","FAMILY","FLOWER","FOREST","FRIEND","GARDEN","GROUND","HEALTH","ISLAND","JUNGLE","KITCHEN","LEADER","MARKET","MEMORY","MUSEUM","NATURE","OFFICE","PEOPLE","PLANET","SCHOOL","WINDOW"],7:["ACCOUNT","ADDRESS","ADVANCE","AGAINST","ALREADY","AMAZING","ANOTHER","ANYBODY","ARTICLE","ATTEMPT","BALANCE","BECAUSE","BELIEVE","BENEFIT","BETWEEN","BILLION","BROTHER","BUILDING","BUSINESS","CAPITAL","CENTRAL","CENTURY","CERTAIN","CHALLENGE","CHAPTER","COLLEGE","COMFORT","COMPANY","COMPLEX","CONCERN","CONTROL","COUNTRY","CULTURE","CURRENT","DEFENSE","DELIVER","DEVELOP","DIGITAL","DISEASE","ECONOMY","ELEMENT","EVENING","EXAMPLE","EXPLAIN","EXPRESS","FEELING","FINANCE","FOREVER","FREEDOM","GENERAL","GROWTH","HEALTH","HISTORY","HOLIDAY","KITCHEN","LIBRARY","MACHINE","MANAGER","MORNING","NETWORK","OPINION","PACKAGE","PICTURE","PRESENT","QUALITY","REALITY","SCIENCE","SOCIETY","STUDENT","SUCCESS","TEACHER","TRAFFIC","WEATHER","WRITING"],8:["ABSOLUTE","ACADEMIC","ACCIDENT","ACTIVITY","ACTUALLY","ADDITION","ADVANCED","ADVOCATE","AIRCRAFT","ALLIANCE","ALTHOUGH","ANALYSIS","ANNOUNCE","ANYTHING","APPROACH","APPROVAL","ARGUMENT","ARTISTIC","ASSEMBLY","AUDIENCE","BASEBALL","BATHROOM","BIRTHDAY","BUILDING","BUSINESS","CAMPAIGN","CAPACITY","CATEGORY","CHAIRMAN","CHAMPION","CHEMICAL","CHILDREN","CIVILIAN","CLINICAL","CLOTHING","COLLAPSE","COMPUTER","CONCRETE","CONFLICT","CONSUMER","CONTRACT","CREATIVE","CRIMINAL","CRITICAL","CUSTOMER","DATABASE","DAUGHTER","DECISION","DELIVERY","DESIGNER","DIRECTOR","EXERCISE","FESTIVAL","FOOTBALL","HOSPITAL","INTERNET","LANGUAGE","MAGAZINE","MATERIAL","MEDICINE","MOUNTAIN","MUSICIAN","PAINTING","PERSONAL","PHYSICAL","PRACTICE","RESEARCH","SOFTWARE","STRATEGY","TRAINING","UNIVERSE"],9:["ADVANTAGE","ADVERTISE","AFTERNOON","AGREEMENT","ATTENTION","AUTHORITY","AVAILABLE","BEAUTIFUL","BEGINNING","BREAKFAST","CAMPAIGN","CANDIDATE","CHALLENGE","CHARACTER","CHEMICAL","CHILDREN","CHRISTMAS","CLASSROOM","COLLECTION","COMMUNITY","COMPLAINT","COMPLETE","COMPUTER","CONDITION","CONFIDENT","CONFUSION","CONSIDER","CONSTANT","CONSUMER","CONTINUE","CONVINCE","CORRIDOR","COVERAGE","CREATURE","CRIMINAL","CRITICISM","CUSTOMER","DANGEROUS","DAUGHTER","DECISION","DELIVERY","DEMOCRAT","DESCRIBE","DESIGNER","DIRECTOR","DISCOVER","DISTANCE","DISTRICT","DOCUMENT","DOMESTIC","EDUCATION","EQUIPMENT","EXCELLENT","EXERCISE","EXPERIENCE","FURNITURE","GUARANTEE","HAPPINESS","IMPORTANT","INFLUENCE","INSURANCE","INTERVIEW","KNOWLEDGE","MARKETING","MEDICINE","NECESSARY","ORGANIZE","PRINCIPLE","QUESTION","STRUCTURE"],10:["ABSOLUTELY","ACCEPTABLE","ACCESSIBLE","ACCOMPLISH","ACCORDANCE","ACCOUNTING","ACCURATELY","ACTIVITIES","ADDITIONAL","ADJUSTMENT","ADMIRATION","ADVENTURE","ADVERTISER","AGGRESSIVE","AGREEMENT","ALTOGETHER","APPEARANCE","APPRECIATE","ARCHITECT","ARGUMENT","ARTIFICIAL","ASSISTANCE","ASSOCIATED","ASSUMPTION","ATMOSPHERE","ATTRACTIVE","AUSTRALIAN","BASKETBALL","BEHAVIORAL","BENEFICIAL","BIOLOGICAL","BOUNDARIES","BOYFRIEND","BREAKFAST","BRILLIANT","BUTTERFLY","CALCULATOR","CALIFORNIA","CAPABILITY","CHALLENGE","CHARACTER","COLLECTION","COMMERCIAL","COMMISSION","COMMITMENT","COMMITTEE","COMMUNITY","COMPARISON","COMPLETELY","COMPLEXITY","CONFERENCE","CONSISTENT","DEPARTMENT","DIFFERENCE","DISCUSSION","EMPLOYMENT","EVERYTHING","EXPERIENCE","FOUNDATION","GENERATION","GOVERNMENT","HEALTHCARE","INVESTMENT","MANAGEMENT","OPERATIONS","PARTICULAR","PRODUCTION","RESTAURANT","TECHNOLOGY","UNIVERSITY"]}}initializeModules(){document.querySelectorAll(".simon-button").forEach(e=>{e.addEventListener("click",()=>this.handleSimonClick(e))});document.querySelectorAll(".word-button").forEach(e=>{e.addEventListener("click",()=>this.handleWordClick(e))});document.querySelectorAll(".grid-cell").forEach(e=>{e.addEventListener("click",()=>this.handleGridClick(e))})}setupEventListeners(){this.homepage.addEventListener("click",()=>{this.homepage.classList.add("hidden"),this.briefingScreen.classList.remove("hidden")}),this.startButton.addEventListener("click",()=>{this.briefingScreen.classList.add("hidden"),this.startGame()}),this.tryAgainButton.addEventListener("click",()=>{this.resetGame(),this.briefingScreen.classList.remove("hidden")}),this.shareButton.addEventListener("click",()=>{this.shareScore()})}updateModuleStatus(e,t){this.moduleStatuses[e]=t;const s=document.querySelector(`.${e}-module .module-status`);s&&(s.style.backgroundColor=t?"#00ff00":"#ff0000")}handleSimonClick(e){console.log("Simon button clicked:",e.className)}handleWordClick(e){console.log("Word button clicked:",e.textContent)}handleGridClick(e){console.log("Grid cell clicked:",e)}setLoading(e){this.isLoading=e,this.startButton.disabled=e,this.loadingSpinner.style.display=e?"inline-block":"none",this.startButton.textContent=e?"Loading...":"Start Mission"}async loadDailyPuzzles(){try{const e=await fetch("clues.txt");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const t=await e.text();this.parsePuzzles(t),this.setCurrentPuzzle()}catch(e){console.error("Error loading puzzles:",e),this.setCurrentPuzzle()}}parsePuzzles(e){const t=[],s=e.split(/\n\s*\n/);for(const e of s){const s=e.trim().split("\n");if(s.length>=4){const e=s[0].trim().match(/^(\d+)\.\s*(.+)$/);if(e){const i=parseInt(e[1]),n=e[2].trim(),E=s.slice(1).map(e=>e.trim()).filter(e=>e.length>0);!isNaN(i)&&n&&3===E.length&&n.length<=7&&t.push({number:i,word:n,clues:E})}}}t.length>0?(this.dailyPuzzles=t,this.shufflePuzzles(),console.log(`Loaded ${t.length} puzzles from clues.txt (filtered to 7 letters or less)`)):console.log("No valid puzzles found in clues.txt, using fallback puzzles")}shufflePuzzles(){this.shuffledPuzzles=[...this.dailyPuzzles];for(let e=this.shuffledPuzzles.length-1;e>0;e--){const t=Math.floor(Math.random()*(e+1));[this.shuffledPuzzles[e],this.shuffledPuzzles[t]]=[this.shuffledPuzzles[t],this.shuffledPuzzles[e]]}console.log(`Shuffled ${this.shuffledPuzzles.length} puzzles for this run`)}setCurrentPuzzle(){if(!this.shuffledPuzzles||0===this.shuffledPuzzles.length)return;this.currentPuzzleIndex=(this.currentMission-1)%this.shuffledPuzzles.length;const e=document.getElementById("mission-number");e&&(e.textContent=String(this.currentMission).padStart(3,"0"))}checkDailyPlay(){const e=(new Date).toDateString();localStorage.getItem("lastPlayed")!==e||this.isTestMode||(this.homepage.classList.add("hidden"),this.showResultScreen("You've already played today. Come back tomorrow!"),this.tryAgainButton.classList.add("hidden"))}showResultScreen(e){this.gameScreen.classList.add("hidden"),this.resultScreen.classList.remove("hidden"),this.resultMessage.textContent=e,this.isTestMode&&this.tryAgainButton.classList.remove("hidden")}async startGame(){try{this.gameScreen.classList.remove("hidden"),this.timeLeft=10,this.milliseconds=0,this.timerDisplay.textContent="10",this.wiresContainer.innerHTML="",this.cluesContainer.innerHTML="",this.setCurrentPuzzle();for(let e=0;e<4;e++){const e=document.createElement("div");e.className="panel-bolt",this.wiresContainer.appendChild(e)}await this.generatePuzzle(),this.startTimer()}catch(e){console.error("Error in startGame:",e),this.showResultScreen("Error loading next mission. Please refresh the page.")}}getRandomWord(e){const t=this.commonWords[e];return t?t[Math.floor(Math.random()*t.length)]:null}generateClues(e){const t=[];t.push(`Starts with ${e[0]}`),t.push(`Has ${e.length} letters`);const s=[`Contains the letter ${e[Math.floor(Math.random()*e.length)]}`,`Ends with ${e[e.length-1]}`,"Common English word","Used in everyday language","Part of speech: noun","Part of speech: verb","Part of speech: adjective"];return t.push(s[Math.floor(Math.random()*s.length)]),t}showSuccessPopup(){const e=document.createElement("div");e.className="success-popup",e.innerHTML=`\n            <div class="success-content">\n                <div class="defused-text">DEFUSED!</div>\n                <div class="mission-text">Onto Mission #${String(this.currentMission).padStart(3,"0")}!</div>\n            </div>\n        `,e.style.cssText="\n            position: fixed;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background: #000;\n            border: 4px solid #0f0;\n            border-radius: 15px;\n            padding: 40px;\n            z-index: 1000;\n            text-align: center;\n            box-shadow: 0 0 50px rgba(0, 255, 0, 0.8);\n            animation: successPopup 0.8s ease-in-out;\n        ";const t=document.createElement("style");t.textContent="\n            @keyframes successPopup {\n                0% { opacity: 0; transform: translate(-50%, -50%) scale(0.5); }\n                25% { opacity: 1; transform: translate(-50%, -50%) scale(1.05); }\n                35% { opacity: 1; transform: translate(-50%, -50%) scale(1); }\n                65% { opacity: 1; transform: translate(-50%, -50%) scale(1); }\n                100% { opacity: 0; transform: translate(-50%, -50%) scale(0.95); }\n            }\n        ",document.head.appendChild(t),document.body.appendChild(e),setTimeout(()=>{try{document.body.removeChild(e),this.startGame()}catch(e){console.error("Error starting next mission:",e),this.resetGame()}},800)}async generatePuzzle(){try{let e;if(this.wiresContainer.innerHTML="",this.wires=[],this.validWords=[],this.shuffledPuzzles&&this.shuffledPuzzles.length>0?(e=this.shuffledPuzzles[this.currentPuzzleIndex],console.log(`Loading puzzle ${this.currentPuzzleIndex+1} of ${this.shuffledPuzzles.length} for mission ${this.currentMission}`)):console.log("No shuffled puzzles available, using fallback"),e)this.displayClues(e.clues);else{const t=4+Math.floor(4*Math.random());let s=this.getRandomWord(t);if(!s||s.length>7){const e=["WIRE","BOMB","TIME","GAME","PLAY","TEST","WORD","CLUE"];s=e[Math.floor(Math.random()*e.length)]}const i=this.generateClues(s);this.displayClues(i),e={word:s,clues:i}}const t=e.word.toUpperCase(),s=t.length,i=window.innerWidth<=1024,n=new Set([t]);if(i){const e=Math.max(5,s);for(let t=4;t<=5;t++){let s=0;for(;this.validWords.length<7&&s<20;){const i=this.getRandomWord(t);i&&!n.has(i)&&i.length<=e&&(this.validWords.push(i),n.add(i)),s++}}let t=0;for(;this.validWords.length<10&&t<50;){const e=this.getRandomWord(4+Math.floor(2*Math.random()));e&&!n.has(e)&&(this.validWords.push(e),n.add(e)),t++}}else{const e=5+Math.floor(2*Math.random());let t=0;for(;this.validWords.length<e&&t<50;){const e=this.getRandomWord(s);e&&!n.has(e)&&(this.validWords.push(e),n.add(e)),t++}if(s>4){const t=1+Math.floor(2*Math.random());let i=0;for(;this.validWords.length<e+t&&i<50;){const e=this.getRandomWord(s-1);e&&!n.has(e)&&e.length<=7&&(this.validWords.push(e),n.add(e)),i++}}if(s<7){let e=0;for(;this.validWords.length<10&&e<50;){const t=this.getRandomWord(s+1);t&&!n.has(t)&&t.length<=7&&(this.validWords.push(t),n.add(t)),e++}}let i=0;for(;this.validWords.length<10&&i<50;){const e=this.getRandomWord(s);e&&!n.has(e)&&e.length<=7&&(this.validWords.push(e),n.add(e)),i++}}for(this.validWords=this.validWords.filter(e=>e.length<=7);this.validWords.length<10;){const e=["WIRE","BOMB","TIME","GAME","PLAY","TEST","WORD","CLUE","DATA","CODE"],t=e[Math.floor(Math.random()*e.length)];this.validWords.includes(t)||this.validWords.push(t)}this.validWords=this.validWords.slice(0,10),console.log(`Generated ${this.validWords.length} words for wires`),this.correctWire=Math.floor(10*Math.random()),this.validWords[this.correctWire]=t;const E=document.getElementById("mission-number");E&&(E.textContent=String(this.currentMission).padStart(3,"0")),this.validWords.forEach((e,t)=>{const s=document.createElement("div");s.className="wire",s.dataset.index=t;const i=["blue","green","red","yellow"],n=i[t%i.length],E=document.createElement("div");E.className="wire-image-container";const r=document.createElement("img");r.className="wire-image wire-full",r.src=`assets/${n}wire_full.png`,r.alt=`${n} wire`,r.style.display="block",r.onerror=()=>{console.error(`Failed to load full wire image: assets/${n}wire_full.png`)},r.onload=()=>{console.log(`Successfully loaded full wire image: assets/${n}wire_full.png`)};const l=document.createElement("img");l.className="wire-image wire-cut",l.src=`assets/${n}wire_cut.png`,l.alt=`${n} wire cut`,l.style.display="none",l.onerror=()=>{console.error(`Failed to load cut wire image: assets/${n}wire_cut.png`)},l.onload=()=>{console.log(`Successfully loaded cut wire image: assets/${n}wire_cut.png`)},E.appendChild(r),E.appendChild(l);const o=document.createElement("div");o.className="wire-label",o.textContent=e,s.appendChild(E),s.appendChild(o),s.setAttribute("tabindex","0"),s.setAttribute("role","button"),s.setAttribute("aria-label",`Cut wire labeled ${e}`),s.addEventListener("click",()=>this.cutWire(t)),s.addEventListener("keydown",e=>{"Enter"!==e.key&&" "!==e.key||(e.preventDefault(),this.cutWire(t))}),this.wiresContainer.appendChild(s),this.wires.push(s)})}catch(e){console.error("Error in generatePuzzle:",e),this.showResultScreen("Error generating puzzle. Please refresh the page.")}}displayClues(e){this.cluesContainer.innerHTML="",this.clues=[],e.forEach((e,t)=>{const s=document.createElement("div");s.className="clue",s.id=`clue${t+1}`,s.textContent=e,this.cluesContainer.appendChild(s),this.clues.push(s)})}startTimer(){this.timeLeft=10,this.milliseconds=0;const e=String(this.timeLeft).padStart(2,"0");this.timerDisplay.textContent=`${e}.00`,this.timerDisplay.setAttribute("data-value",`${e}.00`),this.timer&&clearInterval(this.timer),this.timerDisplay.classList.remove("shake-mild","shake-medium","shake-intense","glitch"),this.timer=setInterval(()=>{this.milliseconds-=50,this.milliseconds<0&&(this.milliseconds=950,this.timeLeft--);const e=`${String(this.timeLeft).padStart(2,"0")}.${String(Math.floor(this.milliseconds/10)).padStart(2,"0")}`;this.timerDisplay.textContent=e,this.timerDisplay.setAttribute("data-value",e),this.timerDisplay.classList.remove("shake-mild","shake-medium","shake-intense"),this.timeLeft<=7&&this.timeLeft>4?this.timerDisplay.classList.add("shake-mild"):this.timeLeft<=4&&this.timeLeft>2?this.timerDisplay.classList.add("shake-medium"):this.timeLeft<=2&&this.timeLeft>0&&this.timerDisplay.classList.add("shake-intense"),this.timeLeft<=0&&this.milliseconds<=0&&(this.timerDisplay.classList.add("glitch"),this.timerDisplay.classList.remove("shake-mild","shake-medium","shake-intense"),clearInterval(this.timer),setTimeout(()=>{this.gameOver(!1)},150))},50)}cutWire(e){if(this.timeLeft<=0)return;clearInterval(this.timer);const t=this.wires[e].querySelector(".wire-image-container"),s=t.querySelector(".wire-full"),i=t.querySelector(".wire-cut");s.style.display="none",i.style.display="block",setTimeout(()=>{e===this.correctWire?this.gameOver(!0):this.gameOver(!1)},150)}gameOver(e){if(this.wires[this.correctWire].classList.add("correct"),e)this.currentMission++,this.currentMission>this.shuffledPuzzles.length?(this.gameScreen.classList.add("hidden"),this.resultScreen.classList.remove("hidden"),this.resultMessage.textContent=`CONGRATULATIONS! You've completed all ${this.shuffledPuzzles.length} missions!`,this.resultMessage.className="success",this.currentMission=1,this.shufflePuzzles(),this.isTestMode&&this.tryAgainButton.classList.remove("hidden")):this.showSuccessPopup();else{const e=this.validWords[this.correctWire]||"Unknown";console.log("Game Over - Correct word:",e,"Correct wire index:",this.correctWire,"Valid words:",this.validWords),this.gameScreen.classList.add("hidden"),this.resultScreen.classList.remove("hidden"),this.resultMessage.innerHTML=`BOOM! You made it to Mission #${String(this.currentMission).padStart(3,"0")}!<br><br>The correct wire was: <strong>${e}</strong>`,this.resultMessage.className="failure",this.currentMission=1,this.shufflePuzzles(),this.isTestMode&&(this.tryAgainButton.classList.remove("hidden"),this.shareButton.classList.remove("hidden"))}}shareScore(){let e=this.resultMessage.innerText.match(/Mission #(\d+)/);const t=`I made it to Mission #${e?e[1]:"???"} in Tick, Click, Boom! Can you beat my score?\n\n${window.location.href}`;navigator.clipboard.writeText(t).then(()=>{this.shareButton.textContent="Copied!",setTimeout(()=>{this.shareButton.textContent="Share Score"},2e3)})}resetGame(){this.gameScreen.classList.add("hidden"),this.resultScreen.classList.add("hidden"),this.isTestMode||this.tryAgainButton.classList.add("hidden"),this.setCurrentPuzzle()}}function initBackgroundTimer(){const e=document.querySelector(".background-timer");let t=10,s=0;const i=String(t).padStart(2,"0");return e.textContent=`${i}.00`,setInterval(function(){if(s-=50,s<0&&(s=950,t--),t<0||0===t&&s<=0)return e.classList.add("glitch"),e.classList.remove("shake-mild","shake-medium","shake-intense"),t=10,s=0,void setTimeout(()=>{e.classList.remove("glitch");const s=String(t).padStart(2,"0");e.textContent=`${s}.00`},150);const i=String(t).padStart(2,"0"),n=String(Math.floor(s/10)).padStart(2,"0");e.textContent=`${i}.${n}`,e.classList.remove("shake-mild","shake-medium","shake-intense"),t<=7&&t>4?e.classList.add("shake-mild"):t<=4&&t>2?e.classList.add("shake-medium"):t<=2&&t>0&&e.classList.add("shake-intense")},50)}document.addEventListener("DOMContentLoaded",()=>{const e=initBackgroundTimer();window.backgroundTimerInterval=e}),document.addEventListener("DOMContentLoaded",()=>{new Game});